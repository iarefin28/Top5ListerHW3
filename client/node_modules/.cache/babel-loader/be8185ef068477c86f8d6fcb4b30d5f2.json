{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { createContext, useState } from 'react';\nimport jsTPS from '../common/jsTPS';\nimport api from '../api';\nimport MoveItem_Transaction from '../transactions/MoveItem_Transaction';\nexport const GlobalStoreContext = /*#__PURE__*/createContext({});\n/*\r\n    This is our global data store. Note that it uses the Flux design pattern,\r\n    which makes use of things like actions and reducers. \r\n    \r\n    @author McKilla Gorilla\r\n*/\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\n\nexport const GlobalStoreActionType = {\n  CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n  CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n  LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n  SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n  SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\n  CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n  SHOW_DELETE_MODAL: \"SHOW_DELETE_MODAL\"\n}; // WE'LL NEED THIS TO PROCESS TRANSACTIONS\n\nconst tps = new jsTPS(); //this will be our counter for when we add items\n//let counter = 0;\n// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\n\nexport const useGlobalStore = () => {\n  _s();\n\n  // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n  const [store, setStore] = useState({\n    idNamePairs: [],\n    currentList: null,\n    newListCounter: 0,\n    listNameActive: false,\n    itemActive: false,\n    listMarkedForDeletion: null\n  }); // HERE'S THE DATA STORE'S REDUCER, IT MUST\n  // HANDLE EVERY TYPE OF STATE CHANGE\n\n  const storeReducer = action => {\n    const {\n      type,\n      payload\n    } = action;\n\n    switch (type) {\n      // LIST UPDATE OF ITS NAME\n      case GlobalStoreActionType.CHANGE_LIST_NAME:\n        {\n          return setStore({\n            idNamePairs: payload.idNamePairs,\n            currentList: payload.top5List,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            isItemEditActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n      // STOP EDITING THE CURRENT LIST\n\n      case GlobalStoreActionType.CLOSE_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            isItemEditActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n      // GET ALL THE LISTS SO WE CAN PRESENT THEM\n\n      case GlobalStoreActionType.LOAD_ID_NAME_PAIRS:\n        {\n          return setStore({\n            idNamePairs: payload,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            isItemEditActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n      // UPDATE A LIST\n\n      case GlobalStoreActionType.SET_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            isItemEditActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n      // START EDITING A LIST NAME\n\n      case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: true,\n            isItemEditActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n      //CREATE A NEW LIST \n\n      case GlobalStoreActionType.CREATE_NEW_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter++,\n            isListNameEditActive: false,\n            isItemEditActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n      //SHOW DELETE MODAL\n\n      case GlobalStoreActionType.SHOW_DELETE_MODAL:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter + 1,\n            isListNameEditActive: false,\n            isItemEditActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n\n      default:\n        return store;\n    }\n  }; // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n  // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n  // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n  // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n\n\n  store.changeListName = function (id, newName) {\n    // GET THE LIST\n    async function asyncChangeListName(id) {\n      let response = await api.getTop5ListById(id);\n\n      if (response.data.success) {\n        let top5List = response.data.top5List;\n        top5List.name = newName;\n\n        async function updateList(top5List) {\n          response = await api.updateTop5ListById(top5List._id, top5List);\n\n          if (response.data.success) {\n            async function getListPairs(top5List) {\n              response = await api.getTop5ListPairs();\n\n              if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                  type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                  payload: {\n                    idNamePairs: pairsArray,\n                    top5List: top5List\n                  }\n                });\n              }\n            }\n\n            getListPairs(top5List);\n          }\n        }\n\n        updateList(top5List);\n      }\n    }\n\n    asyncChangeListName(id);\n  }; // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n\n\n  store.closeCurrentList = function () {\n    storeReducer({\n      type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n      payload: {}\n    });\n  }; // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n\n\n  store.loadIdNamePairs = function () {\n    async function asyncLoadIdNamePairs() {\n      const response = await api.getTop5ListPairs();\n\n      if (response.data.success) {\n        let pairsArray = response.data.idNamePairs;\n        storeReducer({\n          type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n          payload: pairsArray\n        });\n      } else {\n        console.log(\"API FAILED TO GET THE LIST PAIRS\");\n      }\n    }\n\n    asyncLoadIdNamePairs();\n  }; // THE FOLLOWING 8 FUNCTIONS ARE FOR COORDINATING THE UPDATING\n  // OF A LIST, WHICH INCLUDES DEALING WITH THE TRANSACTION STACK. THE\n  // FUNCTIONS ARE setCurrentList, addMoveItemTransaction, addUpdateItemTransaction,\n  // moveItem, updateItem, updateCurrentList, undo, and redo\n\n\n  store.setCurrentList = function (id) {\n    async function asyncSetCurrentList(id) {\n      let response = await api.getTop5ListById(id);\n\n      if (response.data.success) {\n        let top5List = response.data.top5List;\n        response = await api.updateTop5ListById(top5List._id, top5List);\n\n        if (response.data.success) {\n          storeReducer({\n            type: GlobalStoreActionType.SET_CURRENT_LIST,\n            payload: top5List\n          });\n          store.history.push(\"/top5list/\" + top5List._id);\n        }\n      }\n    }\n\n    asyncSetCurrentList(id);\n  };\n\n  store.createNewList = function (id) {\n    async function asyncCreateNewList() {\n      let response = await api.createTop5List({\n        name: \"Untitled\" + store.newListCounter,\n        items: ['?', '?', '?', '?', '?']\n      });\n\n      if (response.data.success) {\n        //counter++;\n        let top5List = response.data.top5List;\n        console.log(top5List);\n        storeReducer({\n          type: GlobalStoreActionType.CREATE_NEW_LIST,\n          payload: top5List\n        });\n        store.history.push(\"/top5list/\" + top5List._id);\n      }\n    }\n\n    asyncCreateNewList();\n  };\n\n  store.showDeleteModal = function (id) {\n    async function asyncShowDeleteModal() {\n      let response = await api.getTop5ListById(id);\n\n      if (response.data.success) {\n        console.log(response.data.top5List);\n      }\n    }\n\n    storeReducer({\n      type: GlobalStoreActionType.SHOW_DELETE_MODAL,\n      payload: id\n    });\n    asyncShowDeleteModal();\n  };\n\n  store.addMoveItemTransaction = function (start, end) {\n    let transaction = new MoveItem_Transaction(store, start, end);\n    tps.addTransaction(transaction);\n  };\n\n  store.moveItem = function (start, end) {\n    start -= 1;\n    end -= 1;\n\n    if (start < end) {\n      let temp = store.currentList.items[start];\n\n      for (let i = start; i < end; i++) {\n        store.currentList.items[i] = store.currentList.items[i + 1];\n      }\n\n      store.currentList.items[end] = temp;\n    } else if (start > end) {\n      let temp = store.currentList.items[start];\n\n      for (let i = start; i > end; i--) {\n        store.currentList.items[i] = store.currentList.items[i - 1];\n      }\n\n      store.currentList.items[end] = temp;\n    } // NOW MAKE IT OFFICIAL\n\n\n    store.updateCurrentList();\n  };\n\n  store.updateCurrentList = function () {\n    async function asyncUpdateCurrentList() {\n      const response = await api.updateTop5ListById(store.currentList._id, store.currentList);\n\n      if (response.data.success) {\n        storeReducer({\n          type: GlobalStoreActionType.SET_CURRENT_LIST,\n          payload: store.currentList\n        });\n      }\n    }\n\n    asyncUpdateCurrentList();\n  };\n\n  store.undo = function () {\n    tps.undoTransaction();\n  };\n\n  store.redo = function () {\n    tps.doTransaction();\n  }; // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n\n\n  store.setIsListNameEditActive = function () {\n    storeReducer({\n      type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n      payload: null\n    });\n  }; // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\n\n\n  return {\n    store,\n    storeReducer\n  };\n};\n\n_s(useGlobalStore, \"GdrgqzQdrFCovFE76xEv/VMPDOE=\");","map":{"version":3,"sources":["C:/Users/iaref/Desktop/Top5Lists_HW3/Top5Lists_HW3/client/src/store/index.js"],"names":["createContext","useState","jsTPS","api","MoveItem_Transaction","GlobalStoreContext","GlobalStoreActionType","CHANGE_LIST_NAME","CLOSE_CURRENT_LIST","LOAD_ID_NAME_PAIRS","SET_CURRENT_LIST","SET_LIST_NAME_EDIT_ACTIVE","CREATE_NEW_LIST","SHOW_DELETE_MODAL","tps","useGlobalStore","store","setStore","idNamePairs","currentList","newListCounter","listNameActive","itemActive","listMarkedForDeletion","storeReducer","action","type","payload","top5List","isListNameEditActive","isItemEditActive","changeListName","id","newName","asyncChangeListName","response","getTop5ListById","data","success","name","updateList","updateTop5ListById","_id","getListPairs","getTop5ListPairs","pairsArray","closeCurrentList","loadIdNamePairs","asyncLoadIdNamePairs","console","log","setCurrentList","asyncSetCurrentList","history","push","createNewList","asyncCreateNewList","createTop5List","items","showDeleteModal","asyncShowDeleteModal","addMoveItemTransaction","start","end","transaction","addTransaction","moveItem","temp","i","updateCurrentList","asyncUpdateCurrentList","undo","undoTransaction","redo","doTransaction","setIsListNameEditActive"],"mappings":"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","sourcesContent":["import { createContext, useState } from 'react'\r\nimport jsTPS from '../common/jsTPS'\r\nimport api from '../api'\r\nimport MoveItem_Transaction from '../transactions/MoveItem_Transaction'\r\nexport const GlobalStoreContext = createContext({});\r\n/*\r\n    This is our global data store. Note that it uses the Flux design pattern,\r\n    which makes use of things like actions and reducers. \r\n    \r\n    @author McKilla Gorilla\r\n*/\r\n\r\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\r\n// DATA STORE STATE THAT CAN BE PROCESSED\r\nexport const GlobalStoreActionType = {\r\n    CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\r\n    CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\r\n    LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\r\n    SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\r\n    SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\r\n    CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\r\n    SHOW_DELETE_MODAL: \"SHOW_DELETE_MODAL\"\r\n}\r\n\r\n// WE'LL NEED THIS TO PROCESS TRANSACTIONS\r\nconst tps = new jsTPS();\r\n\r\n//this will be our counter for when we add items\r\n//let counter = 0;\r\n\r\n// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\r\n// AVAILABLE TO THE REST OF THE APPLICATION\r\nexport const useGlobalStore = () => {\r\n    // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\r\n    const [store, setStore] = useState({\r\n        idNamePairs: [],\r\n        currentList: null,\r\n        newListCounter: 0,\r\n        listNameActive: false,\r\n        itemActive: false,\r\n        listMarkedForDeletion: null\r\n    });\r\n\r\n    // HERE'S THE DATA STORE'S REDUCER, IT MUST\r\n    // HANDLE EVERY TYPE OF STATE CHANGE\r\n    const storeReducer = (action) => {\r\n        const { type, payload } = action;\r\n        switch (type) {\r\n            // LIST UPDATE OF ITS NAME\r\n            case GlobalStoreActionType.CHANGE_LIST_NAME: {\r\n                return setStore({\r\n                    idNamePairs: payload.idNamePairs,\r\n                    currentList: payload.top5List,\r\n                    newListCounter: store.newListCounter,\r\n                    isListNameEditActive: false,\r\n                    isItemEditActive: false,\r\n                    listMarkedForDeletion: null\r\n                });\r\n            }\r\n            // STOP EDITING THE CURRENT LIST\r\n            case GlobalStoreActionType.CLOSE_CURRENT_LIST: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: null,\r\n                    newListCounter: store.newListCounter,\r\n                    isListNameEditActive: false,\r\n                    isItemEditActive: false,\r\n                    listMarkedForDeletion: null\r\n                })\r\n            }\r\n            // GET ALL THE LISTS SO WE CAN PRESENT THEM\r\n            case GlobalStoreActionType.LOAD_ID_NAME_PAIRS: {\r\n                return setStore({\r\n                    idNamePairs: payload,\r\n                    currentList: null,\r\n                    newListCounter: store.newListCounter,\r\n                    isListNameEditActive: false,\r\n                    isItemEditActive: false,\r\n                    listMarkedForDeletion: null\r\n                });\r\n            }\r\n            // UPDATE A LIST\r\n            case GlobalStoreActionType.SET_CURRENT_LIST: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: payload,\r\n                    newListCounter: store.newListCounter,\r\n                    isListNameEditActive: false,\r\n                    isItemEditActive: false,\r\n                    listMarkedForDeletion: null\r\n                });\r\n            }\r\n            // START EDITING A LIST NAME\r\n            case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: payload,\r\n                    newListCounter: store.newListCounter,\r\n                    isListNameEditActive: true,\r\n                    isItemEditActive: false,\r\n                    listMarkedForDeletion: null\r\n                });\r\n            }\r\n            //CREATE A NEW LIST \r\n            case GlobalStoreActionType.CREATE_NEW_LIST: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: payload,\r\n                    newListCounter: store.newListCounter++,\r\n                    isListNameEditActive: false,\r\n                    isItemEditActive: false,\r\n                    listMarkedForDeletion: null\r\n                });\r\n            }\r\n            //SHOW DELETE MODAL\r\n            case GlobalStoreActionType.SHOW_DELETE_MODAL: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: payload,\r\n                    newListCounter: store.newListCounter+1,\r\n                    isListNameEditActive: false,\r\n                    isItemEditActive: false,\r\n                    listMarkedForDeletion: null\r\n                });\r\n            }\r\n            default:\r\n                return store;\r\n        }\r\n    }\r\n    // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\r\n    // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \r\n    // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\r\n\r\n    // THIS FUNCTION PROCESSES CHANGING A LIST NAME\r\n    store.changeListName = function (id, newName) {\r\n        // GET THE LIST\r\n        async function asyncChangeListName(id) {\r\n            let response = await api.getTop5ListById(id);\r\n            if (response.data.success) {\r\n                let top5List = response.data.top5List;\r\n                top5List.name = newName;\r\n                async function updateList(top5List) {\r\n                    response = await api.updateTop5ListById(top5List._id, top5List);\r\n                    if (response.data.success) {\r\n                        async function getListPairs(top5List) {\r\n                            response = await api.getTop5ListPairs();\r\n                            if (response.data.success) {\r\n                                let pairsArray = response.data.idNamePairs;\r\n                                storeReducer({\r\n                                    type: GlobalStoreActionType.CHANGE_LIST_NAME,\r\n                                    payload: {\r\n                                        idNamePairs: pairsArray,\r\n                                        top5List: top5List\r\n                                    }\r\n                                });\r\n                            }\r\n                        }\r\n                        getListPairs(top5List);\r\n                    }\r\n                }\r\n                updateList(top5List);\r\n            }\r\n        }\r\n        asyncChangeListName(id);\r\n    }\r\n\r\n    // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\r\n    store.closeCurrentList = function () {\r\n        storeReducer({\r\n            type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\r\n            payload: {}\r\n        });\r\n    }\r\n\r\n    // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\r\n    store.loadIdNamePairs = function () {\r\n        async function asyncLoadIdNamePairs() {\r\n            const response = await api.getTop5ListPairs();\r\n            if (response.data.success) {\r\n                let pairsArray = response.data.idNamePairs;\r\n                storeReducer({\r\n                    type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\r\n                    payload: pairsArray\r\n                });\r\n            }\r\n            else {\r\n                console.log(\"API FAILED TO GET THE LIST PAIRS\");\r\n            }\r\n        }\r\n        asyncLoadIdNamePairs();\r\n    }\r\n\r\n    // THE FOLLOWING 8 FUNCTIONS ARE FOR COORDINATING THE UPDATING\r\n    // OF A LIST, WHICH INCLUDES DEALING WITH THE TRANSACTION STACK. THE\r\n    // FUNCTIONS ARE setCurrentList, addMoveItemTransaction, addUpdateItemTransaction,\r\n    // moveItem, updateItem, updateCurrentList, undo, and redo\r\n    store.setCurrentList = function (id) {\r\n        async function asyncSetCurrentList(id) {\r\n            let response = await api.getTop5ListById(id);\r\n            if (response.data.success) {\r\n                let top5List = response.data.top5List;\r\n\r\n                response = await api.updateTop5ListById(top5List._id, top5List);\r\n                if (response.data.success) {\r\n                    storeReducer({\r\n                        type: GlobalStoreActionType.SET_CURRENT_LIST,\r\n                        payload: top5List\r\n                    });\r\n                    store.history.push(\"/top5list/\" + top5List._id);\r\n                }\r\n            }\r\n        }\r\n        asyncSetCurrentList(id);\r\n    }\r\n\r\n    store.createNewList = function (id) {\r\n        async function asyncCreateNewList() {\r\n            let response = await api.createTop5List(\r\n                {name: \"Untitled\" + store.newListCounter, items: ['?','?','?','?','?']}\r\n            );\r\n            if (response.data.success){\r\n                //counter++;\r\n                let top5List = response.data.top5List;\r\n                console.log(top5List);\r\n                storeReducer({\r\n                    type: GlobalStoreActionType.CREATE_NEW_LIST,\r\n                    payload: top5List\r\n                });\r\n                store.history.push(\"/top5list/\" + top5List._id);\r\n            }\r\n        }\r\n        asyncCreateNewList();\r\n    }\r\n\r\n    store.showDeleteModal = function (id) {\r\n        async function asyncShowDeleteModal(){\r\n            let response = await api.getTop5ListById(id);\r\n            if(response.data.success){\r\n                console.log(response.data.top5List);\r\n            }\r\n        }\r\n        storeReducer({\r\n            type: GlobalStoreActionType.SHOW_DELETE_MODAL,\r\n            payload: id\r\n        });\r\n        asyncShowDeleteModal();\r\n    }\r\n\r\n\r\n    store.addMoveItemTransaction = function (start, end) {\r\n        let transaction = new MoveItem_Transaction(store, start, end);\r\n        tps.addTransaction(transaction);\r\n    }\r\n    store.moveItem = function (start, end) {\r\n        start -= 1;\r\n        end -= 1;\r\n        if (start < end) {\r\n            let temp = store.currentList.items[start];\r\n            for (let i = start; i < end; i++) {\r\n                store.currentList.items[i] = store.currentList.items[i + 1];\r\n            }\r\n            store.currentList.items[end] = temp;\r\n        }\r\n        else if (start > end) {\r\n            let temp = store.currentList.items[start];\r\n            for (let i = start; i > end; i--) {\r\n                store.currentList.items[i] = store.currentList.items[i - 1];\r\n            }\r\n            store.currentList.items[end] = temp;\r\n        }\r\n\r\n        // NOW MAKE IT OFFICIAL\r\n        store.updateCurrentList();\r\n    }\r\n    store.updateCurrentList = function() {\r\n        async function asyncUpdateCurrentList() {\r\n            const response = await api.updateTop5ListById(store.currentList._id, store.currentList);\r\n            if (response.data.success) {\r\n                storeReducer({\r\n                    type: GlobalStoreActionType.SET_CURRENT_LIST,\r\n                    payload: store.currentList\r\n                });\r\n            }\r\n        }\r\n        asyncUpdateCurrentList();\r\n    }\r\n    store.undo = function () {\r\n        tps.undoTransaction();\r\n    }\r\n    store.redo = function () {\r\n        tps.doTransaction();\r\n    }\r\n\r\n    // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\r\n    store.setIsListNameEditActive = function () {\r\n        storeReducer({\r\n            type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\r\n            payload: null\r\n        });\r\n    }\r\n\r\n    // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\r\n    return { store, storeReducer };\r\n}"]},"metadata":{},"sourceType":"module"}